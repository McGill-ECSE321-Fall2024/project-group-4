openapi: "3.0.3"
info:
  title: "gameshop API"
  description: "gameshop API"
  version: "1.0.0"
servers:
  - url: "https://gameshop"
paths:
  /accounts/customers:
    post:
      summary: "POST accounts/customers"
      operationId: "createCustomer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequestDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/:
    get:
      summary: "GET accounts/customers/"
      operationId: "getCustomers"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/{customerEmail}:
    get:
      summary: "GET accounts/customers/{customerEmail}"
      operationId: "getCustomerByEmail"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/{customerEmail}/addresses:
    post:
      summary: "POST accounts/customers/{customerEmail}/addresses"
      operationId: "createAddress"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressRequestDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AddressResponseDTO"
  /accounts/customers/{customerEmail}/password:
    put:
      summary: "PUT accounts/customers/{customerEmail}/password"
      operationId: "changeCustomerPassword"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/{customerEmail}/phoneNumber/{newPhoneNumber}:
    put:
      summary: "PUT accounts/customers/{customerEmail}/phoneNumber/{newPhoneNumber}"
      operationId: "changeCustomerPhoneNumber"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "newPhoneNumber"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/{customerEmail}/username/{newUsername}:
    put:
      summary: "PUT accounts/customers/{customerEmail}/username/{newUsername}"
      operationId: "updateCustomerUsername"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "newUsername"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/customers/{customerId}/wishlist:
    get:
      summary: "GET accounts/customers/{customerId}/wishlist"
      operationId: "viewWishlist"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponseDTO"
  /accounts/customers/{customerId}/wishlist/{gameId}:
    put:
      summary: "PUT accounts/customers/{customerId}/wishlist/{gameId}"
      operationId: "addGameToWishlist"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE accounts/customers/{customerId}/wishlist/{gameId}"
      operationId: "removeGameFromWishlist"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /accounts/employees:
    post:
      summary: "POST accounts/employees"
      operationId: "createEmployee"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeRequestDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/employees/:
    get:
      summary: "GET accounts/employees/"
      operationId: "getEmployees"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/employees/id/{employeeId}:
    get:
      summary: "GET accounts/employees/id/{employeeId}"
      operationId: "getEmployeeById"
      parameters:
        - name: "employeeId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/employees/username/{username}:
    get:
      summary: "GET accounts/employees/username/{username}"
      operationId: "getEmployeeByUsername"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/employees/{id}/is_active/{status}:
    put:
      summary: "PUT accounts/employees/{id}/is_active/{status}"
      operationId: "setEmployeeActivityById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "OK"
  /accounts/employees/{oldUsername}/username/{newUsername}:
    put:
      summary: "PUT accounts/employees/{oldUsername}/username/{newUsername}"
      operationId: "updateEmployeeUsername"
      parameters:
        - name: "oldUsername"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "newUsername"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/login/customers/{customerEmail}:
    post:
      summary: "POST accounts/login/customers/{customerEmail}"
      operationId: "customerLogin"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /accounts/login/employees/{username}:
    post:
      summary: "POST accounts/login/employees/{username}"
      operationId: "employeeLogin"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeResponseDTO"
  /accounts/login/manager/{username}:
    post:
      summary: "POST accounts/login/manager/{username}"
      operationId: "managerLogin"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManagerDTO"
  /accounts/manager/:
    post:
      summary: "POST accounts/manager/"
      operationId: "createManager"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManagerDTO"
  /accounts/policies:
    post:
      summary: "POST accounts/policies"
      operationId: "createPolicy"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PolicyDTO"
  /accounts/policies/{policyId}:
    get:
      summary: "GET accounts/policies/{policyId}"
      operationId: "getPolicyById"
      parameters:
        - name: "policyId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PolicyDTO"
    put:
      summary: "PUT accounts/policies/{policyId}"
      operationId: "updatePolicy"
      parameters:
        - name: "policyId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PolicyDTO"
    delete:
      summary: "DELETE accounts/policies/{policyId}"
      operationId: "deletePolicy"
      parameters:
        - name: "policyId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /addresses/{addressId}:
    get:
      summary: "GET addresses/{addressId}"
      operationId: "getAddressById"
      parameters:
        - name: "addressId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AddressResponseDTO"
  /credit-cards/{creditCardId}:
    get:
      summary: "GET credit-cards/{creditCardId}"
      operationId: "getCreditCardById"
      parameters:
        - name: "creditCardId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreditCardResponseDTO"
  /customers/{customerEmail}:
    get:
      summary: "GET customers/{customerEmail}"
      operationId: "getCustomerByEmail"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerResponseDTO"
  /customers/{customerEmail}/cart:
    post:
      summary: "POST customers/{customerEmail}/cart"
      operationId: "checkout"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "billingAddressId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "creditCardId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "202":
          description: "Accepted"
  /customers/{customerEmail}/cart/price:
    get:
      summary: "GET customers/{customerEmail}/cart/price"
      operationId: "getCartPrice"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                type: "number"
                format: "float"
  /customers/{customerEmail}/credit-cards:
    get:
      summary: "GET customers/{customerEmail}/credit-cards"
      operationId: "getCreditCardsByCustomer"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreditCardResponseDTO"
    post:
      summary: "POST customers/{customerEmail}/credit-cards"
      operationId: "addCreditCardToCustomerWallet"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditCardRequestDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreditCardResponseDTO"
  /customers/{customerEmail}/credit-cards/{creditCardId}:
    delete:
      summary: "DELETE customers/{customerEmail}/credit-cards/{creditCardId}"
      operationId: "removeCreditCardFromWallet"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "creditCardId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /customers/{customerEmail}/reviews:
    post:
      summary: "POST customers/{customerEmail}/reviews"
      operationId: "postReview"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "purchaseId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "rating"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "201":
          description: "Created"
  /customers/{customerEmail}/reviews/{reviewId}/likes:
    put:
      summary: "PUT customers/{customerEmail}/reviews/{reviewId}/likes"
      operationId: "likeReview"
      parameters:
        - name: "customerEmail"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "reviewId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "202":
          description: "Accepted"
  /games/{gameId}/price:
    get:
      summary: "GET games/{gameId}/price"
      operationId: "getPromotionalPrice"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                type: "number"
                format: "float"
  /purchases/{purchaseId}:
    get:
      summary: "GET purchases/{purchaseId}"
      operationId: "getPurchaseById"
      parameters:
        - name: "purchaseId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PurchaseDTO"
  /reviews/{reviewId}:
    get:
      summary: "GET reviews/{reviewId}"
      operationId: "getReviewById"
      parameters:
        - name: "reviewId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
  /reviews/{reviewId}/reply:
    post:
      summary: "POST reviews/{reviewId}/reply"
      operationId: "replyToReview"
      parameters:
        - name: "reviewId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "managerId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "201":
          description: "Created"
  /catalogue/games/{searchPrompt}:
    get:
      summary: "GET catalogue/games/{searchPrompt}"
      operationId: "getGamesBySearchPrompt"
      parameters:
        - name: "searchPrompt"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponseDTO"
  /categories/{categoryName}:
    post:
      summary: "POST categories/{categoryName}"
      operationId: "createCategory"
      parameters:
        - name: "categoryName"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE categories/{categoryName}"
      operationId: "deleteCategory"
      parameters:
        - name: "categoryName"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
  /categories/{categoryName}/games:
    get:
      summary: "GET categories/{categoryName}/games"
      operationId: "getGamesInCategory"
      parameters:
        - name: "categoryName"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponseDTO"
  /categories/{categoryName}/games/{gameId}:
    put:
      summary: "PUT categories/{categoryName}/games/{gameId}"
      operationId: "addGameToCategory"
      parameters:
        - name: "categoryName"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE categories/{categoryName}/games/{gameId}"
      operationId: "removeGameFromCategory"
      parameters:
        - name: "categoryName"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /customers/{customerId}/cart:
    get:
      summary: "GET customers/{customerId}/cart"
      operationId: "getGamesInCart"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponseDTO"
  /customers/{customerId}/cart/{gameId}:
    put:
      summary: "PUT customers/{customerId}/cart/{gameId}"
      operationId: "addGameToCart"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE customers/{customerId}/cart/{gameId}"
      operationId: "deleteGameFromCart"
      parameters:
        - name: "customerId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /gameRequests:
    post:
      summary: "POST gameRequests"
      operationId: "createGameRequest"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameRequestDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GameRequestDTO"
  /gameRequests/{gameRequestId}:
    get:
      summary: "GET gameRequests/{gameRequestId}"
      operationId: "getGameRequestById"
      parameters:
        - name: "gameRequestId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GameRequestDTO"
  /gameRequests/{gameRequestId}/requestStatus:
    put:
      summary: "PUT gameRequests/{gameRequestId}/requestStatus"
      operationId: "setGameRequestStatus"
      parameters:
        - name: "gameRequestId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "status"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /games:
    get:
      summary: "GET games"
      operationId: "getInventory"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GameResponseDTO"
    post:
      summary: "POST games"
      operationId: "addGame"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameInputDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GameResponseDTO"
  /games/{gameId}:
    get:
      summary: "GET games/{gameId}"
      operationId: "getGameById"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GameResponseDTO"
    delete:
      summary: "DELETE games/{gameId}"
      operationId: "removeGame"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /games/{gameId}/is_active:
    put:
      summary: "PUT games/{gameId}/is_active"
      operationId: "setGameActivity"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "is_active"
          in: "query"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "OK"
  /games/{gameId}/promotions/{promotionId}:
    put:
      summary: "PUT games/{gameId}/promotions/{promotionId}"
      operationId: "addPromotionToGame"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "promotionId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE games/{gameId}/promotions/{promotionId}"
      operationId: "removePromotionFromGame"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "promotionId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /games/{gameId}/stock:
    put:
      summary: "PUT games/{gameId}/stock"
      operationId: "updateStock"
      parameters:
        - name: "gameId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "stockChange"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
  /promotions:
    post:
      summary: "POST promotions"
      operationId: "createPromotion"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromotionRequestDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PromotionResponseDTO"
  /promotions/{promotionId}:
    get:
      summary: "GET promotions/{promotionId}"
      operationId: "getPromotionById"
      parameters:
        - name: "promotionId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PromotionResponseDTO"
    put:
      summary: "PUT promotions/{promotionId}"
      operationId: "updatePromotion"
      parameters:
        - name: "promotionId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromotionRequestDTO"
        required: true
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE promotions/{promotionId}"
      operationId: "deletePromotion"
      parameters:
        - name: "promotionId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
components:
  schemas:
    AddressResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        street:
          type: "string"
        city:
          type: "string"
        province:
          type: "string"
        country:
          type: "string"
        postalCode:
          type: "string"
    CreditCardResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        cardNumber:
          type: "integer"
          format: "int32"
        cvv:
          type: "integer"
          format: "int32"
        expiryDate:
          type: "string"
          format: "date"
        billingAddress:
          $ref: "#/components/schemas/AddressResponseDTO"
    ReplyDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        text:
          type: "string"
        review:
          $ref: "#/components/schemas/ReviewDTO"
    CategoryResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
    GameResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        coverPicture:
          type: "string"
        price:
          type: "number"
          format: "float"
        isActive:
          type: "boolean"
        stock:
          type: "integer"
          format: "int32"
        categories:
          type: "array"
          items:
            $ref: "#/components/schemas/CategoryResponseDTO"
    CustomerResponseDTO:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        phoneNumber:
          type: "string"
        addresses:
          type: "array"
          items:
            $ref: "#/components/schemas/AddressResponseDTO"
        creditCards:
          type: "array"
          items:
            $ref: "#/components/schemas/CreditCardResponseDTO"
        likedReviews:
          type: "array"
          items:
            $ref: "#/components/schemas/ReviewDTO"
        purchases:
          type: "array"
          items:
            $ref: "#/components/schemas/PurchaseDTO"
        id:
          type: "integer"
          format: "int32"
    EmployeeResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        password:
          type: "string"
        isActive:
          type: "boolean"
        refundRequests:
          type: "array"
          items:
            $ref: "#/components/schemas/RefundRequestDTO"
    RefundRequestDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        purchcase:
          $ref: "#/components/schemas/PurchaseDTO"
        status:
          type: "string"
          enum:
            - "APPROVED"
            - "DENIED"
            - "PENDING"
        reason:
          type: "string"
        reviewer:
          $ref: "#/components/schemas/EmployeeResponseDTO"
    PurchaseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        purchaseDate:
          type: "string"
          format: "date"
        purchasePrice:
          type: "number"
          format: "float"
        game:
          $ref: "#/components/schemas/GameResponseDTO"
        customer:
          $ref: "#/components/schemas/CustomerResponseDTO"
        billingAddress:
          $ref: "#/components/schemas/AddressResponseDTO"
        creditCard:
          $ref: "#/components/schemas/CreditCardResponseDTO"
        review:
          $ref: "#/components/schemas/ReviewDTO"
        refundRequest:
          $ref: "#/components/schemas/RefundRequestDTO"
    ReviewDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        rating:
          type: "integer"
          format: "int32"
        text:
          type: "string"
        reply:
          $ref: "#/components/schemas/ReplyDTO"
        purchase:
          $ref: "#/components/schemas/PurchaseDTO"
        likedBy:
          type: "array"
          items:
            $ref: "#/components/schemas/CustomerResponseDTO"
    CustomerRequestDTO:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        phoneNumber:
          type: "string"
        addresses:
          type: "array"
          items:
            $ref: "#/components/schemas/AddressResponseDTO"
        creditCards:
          type: "array"
          items:
            $ref: "#/components/schemas/CreditCardResponseDTO"
        likedReviews:
          type: "array"
          items:
            $ref: "#/components/schemas/ReviewDTO"
        purchases:
          type: "array"
          items:
            $ref: "#/components/schemas/PurchaseDTO"
    AddressRequestDTO:
      type: "object"
      properties:
        street:
          type: "string"
        city:
          type: "string"
        province:
          type: "string"
        country:
          type: "string"
        postalCode:
          type: "string"
    ChangePasswordDTO:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
    EmployeeRequestDTO:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        isActive:
          type: "boolean"
        refundRequests:
          type: "array"
          items:
            $ref: "#/components/schemas/RefundRequestDTO"
    ManagerDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        password:
          type: "string"
    PolicyDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        description:
          type: "string"
    CreditCardRequestDTO:
      type: "object"
      properties:
        cardNumber:
          type: "integer"
          format: "int32"
        cvv:
          type: "integer"
          format: "int32"
        expiryDate:
          type: "string"
          format: "date"
        billingAddress:
          $ref: "#/components/schemas/AddressResponseDTO"
    GameRequestDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        externalReview:
          type: "string"
        requestStatus:
          type: "string"
          enum:
            - "APPROVED"
            - "DENIED"
            - "PENDING"
        requestor:
          $ref: "#/components/schemas/EmployeeResponseDTO"
        game:
          $ref: "#/components/schemas/GameResponseDTO"
    GameInputDTO:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        coverPicture:
          type: "string"
        price:
          type: "number"
          format: "float"
        isActive:
          type: "boolean"
        stock:
          type: "integer"
          format: "int32"
        categories:
          type: "array"
          items:
            type: "string"
    Date:
      type: "object"
      properties: { }
    PromotionRequestDTO:
      type: "object"
      properties:
        discount:
          type: "integer"
          format: "int32"
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
    PromotionResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        discount:
          type: "integer"
          format: "int32"
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"